import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;

/*
 * Creates and maintains binary translation table for publisher
 * converts into byteArray to be sent over the network.
 * 
 * */

public class BinaryTranslationTable implements Serializable{
	private transient ArrayList<TableRow> Table = new ArrayList<TableRow>();
	private ByteArrayOutputStream bos = new ByteArrayOutputStream();
	
	public void addElement(TableRow rowAdd){
		Table.add(rowAdd);				
	}
	public byte[] serializeTable(){
		ObjectOutput out = null;
		byte[] tableInByteArr = null;
	    try {
			out = new ObjectOutputStream(bos);
			out.writeObject(Table);
			out.flush();
			tableInByteArr = bos.toByteArray();
        	bos.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}			  
		return tableInByteArr;
	}
	
	/*Debug*/
	public static void deserializeTable(byte[] arr){
		ObjectInput in = null;
		try {
			 in = new ObjectInputStream(new ByteArrayInputStream(arr));
			 BinaryTranslationTable reconstructedTable = new BinaryTranslationTable();
			 try {
				reconstructedTable = (BinaryTranslationTable) in.readObject();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}			 
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
}




