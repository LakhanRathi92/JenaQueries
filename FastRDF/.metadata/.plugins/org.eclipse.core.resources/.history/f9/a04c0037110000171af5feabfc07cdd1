import java.io.FileInputStream;
import java.io.FileNotFoundException;

import org.apache.jena.rdf.model.Model ;
import org.apache.jena.rdf.model.ModelFactory ;
import org.apache.jena.riot.RDFDataMgr ;
import org.apache.jena.riot.RDFLanguages ;

import org.apache.jena.query.* ;

public class fastRDFCheck {

    public static void main(String[] args)
    {
    	Model m = ModelFactory.createDefaultModel() ;
        // read into the model.
    	
    	
    	try {
			m.read(new FileInputStream("published.rdf"),null,"TTL");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        // Alternatively, use the RDFDataMgr, which reads from the web,
        // with content negotiation.  Plain names are assumed to be 
        // local files where file extension indicates the syntax.  
        
    	
        m.write(System.out);
        
        String queryString = ""
        Query query = QueryFactory.create(queryString) ;
        try (QueryExecution qexec = QueryExecutionFactory.create(query, model)) {
          ResultSet results = qexec.execSelect() ;
          for ( ; results.hasNext() ; )
          {
            QuerySolution soln = results.nextSolution() ;
            RDFNode x = soln.get("varName") ;       // Get a result variable by name.
            Resource r = soln.getResource("VarR") ; // Get a result variable - must be a resource
            Literal l = soln.getLiteral("VarL") ;   // Get a result variable - must be a literal
          }
        }
        
    } 
}

